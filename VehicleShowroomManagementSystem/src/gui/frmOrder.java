/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import bll.Manager;
import dao.CarDAO;
import dao.CustomerDAO;
import dao.EmployeeDAO;
import dao.OrderDAO;
import dao.OrderDetailsDAO;
import dto.Car;
import dto.Customer;
import dto.Employee;
import dto.Order;
import dto.OrderDetails;
import dto.PurchaseOrderDetails;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.jdesktop.swingx.decorator.ColorHighlighter;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.Highlighter;
import org.jdesktop.swingx.decorator.HighlighterFactory;

/**
 *
 * 
 */
public class frmOrder extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form frmOrder
     */
    public frmOrder() {
        initComponents();
        new Utility().setIcon("/resources/order-17x20.gif", this, null);
        setLang(Main.baseName);
        loadEmptyForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblOrderInfor = new javax.swing.JLabel();
        lblOrderId = new javax.swing.JLabel();
        lblOrderID = new javax.swing.JLabel();
        lblCustName = new javax.swing.JLabel();
        lblConfirm = new javax.swing.JLabel();
        cbxConfirm = new javax.swing.JCheckBox();
        lblOnOrder = new javax.swing.JLabel();
        dpkOrder = new org.jdesktop.swingx.JXDatePicker();
        lblCustomerName = new javax.swing.JLabel();
        lblEmpName = new javax.swing.JLabel();
        lblEmployeeName = new javax.swing.JLabel();
        lblRequest = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaRequest = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrder = new org.jdesktop.swingx.JXTable();
        lblTotalPrices = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnRemoveDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        btnCustomer = new javax.swing.JButton();
        btnCar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Order Details");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(192, 192, 192)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblOrderInfor.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        lblOrderInfor.setForeground(new java.awt.Color(0, 51, 255));
        lblOrderInfor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOrderInfor.setText("ORDER INFORMATION");
        jPanel1.add(lblOrderInfor, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 12, 610, 50));

        lblOrderId.setText("Order ID");
        jPanel1.add(lblOrderId, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 83, 90, -1));

        lblOrderID.setText("Auto Creation");
        jPanel1.add(lblOrderID, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 83, -1, -1));

        lblCustName.setText("Customer Name");
        jPanel1.add(lblCustName, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 122, -1, -1));

        lblConfirm.setText("Confirmation");
        jPanel1.add(lblConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 200, -1, 21));

        cbxConfirm.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.add(cbxConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, -1, -1));

        lblOnOrder.setText("On Order");
        jPanel1.add(lblOnOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 80, 100, 22));

        dpkOrder.setFormats("dd/MM/yyyy");
        Calendar cld = Calendar.getInstance();
        dpkOrder.setDate(cld.getTime());
        jPanel1.add(dpkOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 119, -1));
        jPanel1.add(lblCustomerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 122, -1, -1));

        lblEmpName.setText("Employee Name");
        jPanel1.add(lblEmpName, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 160, -1, -1));
        jPanel1.add(lblEmployeeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 160, -1, -1));

        lblRequest.setText("Request");
        jPanel1.add(lblRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 120, 48, 19));

        txaRequest.setColumns(20);
        txaRequest.setRows(5);
        jScrollPane1.setViewportView(txaRequest);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 150, 240, 75));

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Highlighter simpleStripHL = HighlighterFactory.createSimpleStriping();
        tblOrder.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW,
            null, new Color(0, 0, 255)));
    tblOrder.setHighlighters(simpleStripHL);
    tblOrder.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW,
        null, new Color(255, 102, 0)));
tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        tblOrderMouseClicked(evt);
    }
    });
    jScrollPane2.setViewportView(tblOrder);

    jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 283, 587, 210));

    lblTotalPrices.setText("Total Price:");
    jPanel1.add(lblTotalPrices, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 520, 60, -1));

    lblTotalPrice.setText("jLabel9");
    jPanel1.add(lblTotalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 520, 200, -1));

    jPanel2.setBackground(new java.awt.Color(255, 255, 255));
    jPanel2.setLayout(new java.awt.GridLayout(1, 3, 5, 0));
    jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, -1, 30));

    btnRemoveDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Erase-20.gif"))); // NOI18N
    btnRemoveDelete.setText("Remove");
    btnRemoveDelete.setActionCommand("remove");
    btnRemoveDelete.addActionListener(this);
    btnRemoveDelete.setEnabled(false);
    jPanel1.add(btnRemoveDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 250, -1, -1));

    btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/cancel.gif"))); // NOI18N
    btnCancel.setText("Cancel");
    btnCancel.setActionCommand("cancel");
    btnCancel.addActionListener(this);
    jPanel1.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 510, -1, 30));

    btnAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/OK-20.gif"))); // NOI18N
    btnAccept.setText("Accept");
    btnAccept.setActionCommand("accept");
    btnAccept.addActionListener(this);
    jPanel1.add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 510, 104, 30));

    btnCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/User group. 20x20gif.gif"))); // NOI18N
    btnCustomer.setText("Customer");
    btnCustomer.setActionCommand("customer");
    btnCustomer.addActionListener(this);
    jPanel1.add(btnCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, -1, 30));

    btnCar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Taxi 20x20gif.gif"))); // NOI18N
    btnCar.setText("Car");
    btnCar.setActionCommand("car");
    btnCar.addActionListener(this);
    jPanel1.add(btnCar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 104, 30));

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
            .addContainerGap())
    );

    getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 580));

    setSize(new java.awt.Dimension(645, 618));
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderMouseClicked
        // TODO add your handling code here:
        btnRemoveDelete.setEnabled(true);
    }//GEN-LAST:event_tblOrderMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmOrder().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCancel;
    public javax.swing.JButton btnCar;
    public javax.swing.JButton btnCustomer;
    public javax.swing.JButton btnRemoveDelete;
    private javax.swing.JCheckBox cbxConfirm;
    public org.jdesktop.swingx.JXDatePicker dpkOrder;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblConfirm;
    private javax.swing.JLabel lblCustName;
    public static javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblEmpName;
    public javax.swing.JLabel lblEmployeeName;
    private javax.swing.JLabel lblOnOrder;
    public javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblOrderInfor;
    private javax.swing.JLabel lblRequest;
    public javax.swing.JLabel lblTotalPrice;
    private javax.swing.JLabel lblTotalPrices;
    private static org.jdesktop.swingx.JXTable tblOrder;
    private javax.swing.JTextArea txaRequest;
    // End of variables declaration//GEN-END:variables
    Employee emp;
    Customer c;

    public void setLang(String baseName) {
        Locale locale = Locale.getDefault();
        ResourceBundle rb = ResourceBundle.getBundle(baseName, locale);
        lblOrderInfor.setText(rb.getString("orderInfor"));
        lblConfirm.setText(rb.getString("confirmation"));
        lblCustName.setText(rb.getString("custName"));
        lblEmpName.setText(rb.getString("empName"));
        lblOrderId.setText(rb.getString("orderID"));
        lblRequest.setText(rb.getString("request"));
        lblOnOrder.setText(rb.getString("onOrder"));
        btnAccept.setText(rb.getString("accept"));
        btnCar.setText(rb.getString("car"));
        btnCustomer.setText(rb.getString("customer"));
        btnCancel.setText(rb.getString("cancel"));
        btnRemoveDelete.setText(rb.getString("delete"));
        lblTotalPrices.setText(rb.getString("totalPrice"));
        JTableHeader th = tblOrder.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue(rb.getString("carNo"));
        tc = tcm.getColumn(1);
        tc.setHeaderValue(rb.getString("name"));
        tc = tcm.getColumn(2);
        tc.setHeaderValue(rb.getString("modelName"));
        tc = tcm.getColumn(3);
        tc.setHeaderValue(rb.getString("quantity"));
//        tc = tcm.getColumn(4);
//        tc.setHeaderValue(rb.getString("price"));
        th.repaint();
    }

    public void setOrderData(long OrderID) throws SQLException {
        Locale locale = Locale.getDefault();
        ResourceBundle rb = ResourceBundle.getBundle(Main.baseName, locale);
        ResultSet rs = new Manager().getOrderDetails(OrderID);
        Order order = new OrderDAO().getOrder(OrderID);
        txaRequest.setText(order.getRequest());
        cbxConfirm.setSelected(order.isConfirmation());
        dpkOrder.setDate(order.getOnOrder());
        Vector vData = new Vector();
        Vector vColumn = new Vector();
        vColumn.removeAllElements();
        vColumn.add(rb.getString("carNo"));
        vColumn.add(rb.getString("name"));
        vColumn.add(rb.getString("modelName"));
        vColumn.add(rb.getString("quantity"));
        vColumn.add(rb.getString("price"));
        float totalPrice = 0;
        while (rs.next()) {
            Vector vRow = new Vector();
            vRow.add(rs.getLong("CarNo"));
            vRow.add(rs.getString("Name"));
            vRow.add(rs.getString("ModelName"));
            vRow.add(rs.getInt("Quantity"));
            vRow.add(rs.getFloat("Price"));
            totalPrice += (rs.getInt("Quantity") * rs.getFloat("Price"));
            vData.add(vRow);
        }
        DefaultTableModel model = new DefaultTableModel(vData, vColumn);
        tblOrder.setModel(model);
        lblTotalPrice.setText(totalPrice + "");
    }

    public static void setDetailsTable(long CarNo, int Quantity) {
        for (int i = 0; i < tblOrder.getRowCount(); i++) {
            if (tblOrder.getValueAt(i, 0).equals(CarNo)) {
                int quantity = (int) tblOrder.getValueAt(i, 3);
                tblOrder.setValueAt(quantity + Quantity, i, 3);
                return;
            }
        }
        Vector v = new Vector();
        Car c = new CarDAO().getCar(CarNo);
        v.add(c.getCarNo());
        v.add(c.getName());
        v.add(c.getModelName());
        v.add(Quantity);
        v.add(c.getPrice());
        ((DefaultTableModel) tblOrder.getModel()).addRow(v);

    }

    public void loadEmptyForm() {
        Locale locale = Locale.getDefault();
        ResourceBundle rb = ResourceBundle.getBundle(Main.baseName, locale);
        this.setTitle("Create New Order");
        this.btnAccept.setActionCommand("add");
        this.btnAccept.setVisible(true);
        this.btnRemoveDelete.setActionCommand("remove");
        emp = new EmployeeDAO().getEmployee(Main.EmployeeID);
        this.lblEmployeeName.setText(emp.getFirstName() + " " + emp.getLastName());
        this.btnCustomer.setVisible(true);
        this.btnCar.setVisible(true);
        this.btnRemoveDelete.setEnabled(false);
        lblOrderID.setText(new Manager().getNewID("Order") + "");
        lblCustomerName.setText("Please select a Customer");
        cbxConfirm.setSelected(false);
        txaRequest.setText("");
        Calendar c = Calendar.getInstance();
        dpkOrder.setDate(c.getTime());
        Vector vData = new Vector();
        Vector vColumn = new Vector();
        vColumn.removeAllElements();
        vColumn.add(rb.getString("carNo"));
        vColumn.add(rb.getString("name"));
        vColumn.add(rb.getString("modelName"));
        vColumn.add(rb.getString("quantity"));
        vColumn.add(rb.getString("price"));
        float totalPrice = 0;
        DefaultTableModel model = new DefaultTableModel(vData, vColumn);
        tblOrder.setModel(model);
        lblTotalPrice.setText(totalPrice + "");
    }

    public void updateTotalPrice() {
        float totalPrice = 0;
        for (int i = 0; i < tblOrder.getRowCount(); i++) {
            int Quantity = (int) tblOrder.getValueAt(i, 3);
            float Price = (float) tblOrder.getValueAt(i, 4);
            totalPrice += Quantity * Price;
        }
        lblTotalPrice.setText(totalPrice + "   ($)");
    }

    public void setValue() {
        if (dlgCustomerList.CustomerID != 0) {
            c = new CustomerDAO().getCustomer(dlgCustomerList.CustomerID);
        }
    }

    public void addNewOrderDetails() {
        setValue();
        Manager mng = new Manager();
        Order order = new Order(Long.parseLong(lblOrderID.getText()), c.getCustomerID(), new Date(dpkOrder.getDate().getTime()), cbxConfirm.isSelected(), txaRequest.getText(), emp.getEmployeeID());
        mng.addNew(order, "order");
        long CarNo;
        int Quantity;

        for (int i = 0; i < tblOrder.getRowCount(); i++) {
            CarNo = (long) tblOrder.getValueAt(i, 0);
            Quantity = (int) tblOrder.getValueAt(i, 3);
            OrderDetails od = new OrderDetails(order.getOrderID(), CarNo, Quantity);
            mng.addNew(od, "orderDetails");
        }

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "remove":
                ((DefaultTableModel) tblOrder.getModel()).removeRow(tblOrder.getSelectedRow());
                updateTotalPrice();
                if (tblOrder.getRowCount() == 0) {
                    btnRemoveDelete.setEnabled(false);
                }
                break;
            case "delete":
                int i = tblOrder.getSelectedRow();
                if (i >= 0) {
                    long CarNo = (long) tblOrder.getValueAt(i, 0);
                    new OrderDetailsDAO().delete(Long.parseLong(lblOrderID.getText()), CarNo);
                    ((DefaultTableModel) tblOrder.getModel()).removeRow(i);
                    updateTotalPrice();
                }
                if (tblOrder.getRowCount() == 0) {
                    btnRemoveDelete.setEnabled(false);
                }
                break;
            case "customer":
                new dlgCustomerList(this, true).setVisible(true);
                break;
            case "car":
                dlgCarList cl = new dlgCarList(this, true);
                cl.txtPrice.setVisible(false);
                cl.lblPrice.setVisible(false);
                cl.lbl$.setVisible(false);
                cl.btnAdd.setActionCommand("addForOrder");
                cl.setVisible(true);
                if (!cl.isDisplayable()) {
                    updateTotalPrice();
                }
                break;
            case "add":
                if (lblCustomerName.getText().equals("Please select a Customer")) {
                    Message.error("Please choose a customer!");
                    btnCustomer.requestFocus();
                    return;
                }
                if (tblOrder.getRowCount() == 0) {
                    Message.error("Please choose atleast a car!");
                    btnCar.requestFocus();
                    return;
                }
                addNewOrderDetails();
                dispose();
                break;
            case "update":
                if (tblOrder.getRowCount() == 0) {
                    Message.error("Please choose atleast a car!");
                    btnCar.requestFocus();
                    return;
                }
                Order order = new OrderDAO().getOrder(Long.parseLong(lblOrderID.getText()));
                order = new Order(order.getOrderID(), dlgCustomerList.CustomerID, new Date(dpkOrder.getDate().getTime()), cbxConfirm.isSelected(), txaRequest.getText(), Main.EmployeeID);
                new Manager().update(order, "order");
                for (int j = 0; j < tblOrder.getRowCount(); j++) {
                    long CarNo = (long) tblOrder.getValueAt(j, 0);
                    if (!new OrderDetailsDAO().isExistCarNo(Long.parseLong(lblOrderID.getText()), CarNo)) {
                        int Quantity = (int) tblOrder.getValueAt(j, 3);
                        float Price = (float) tblOrder.getValueAt(j, 4);
                        OrderDetails od = new OrderDetails(Long.parseLong(lblOrderID.getText()), CarNo, Quantity);
                        new Manager().addNew(od, "orderDetails");
                    }
                }
                dispose();
                break;
            case "cancel":
                dispose();
                break;
        }
    }
}
