/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import bll.Manager;
import dao.AssigningDAO;
import dao.CustomerDAO;
import dao.EmployeeDAO;
import dao.OrderDAO;
import dto.Assigning;
import dto.Customer;
import dto.Employee;
import dto.Order;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.decorator.ColorHighlighter;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.Highlighter;
import org.jdesktop.swingx.decorator.HighlighterFactory;

/**
 *
 *
 */
public class pnlSales extends javax.swing.JPanel implements ActionListener {

    /**
     * Creates new form pnlCar
     */
    public pnlSales() {
        initComponents();
        loadOrderData("");
        loadAssigningData("");
        JButton arrButton[] = {btnUpdateOrder, btnUpdateAssigning, btnNewOrder, btnDetailsAssigning, btnDetailsOrder,
            btnNewAssigning, btnDeleteOrder, btnDeleteAssigning, btnUpdateListAssigning, btnUpdateListOrder};
        if (!Main.DepartmentName.equals("Sales")) {
            new Utility().disableButton(arrButton);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbpSales = new javax.swing.JTabbedPane();
        pnlOrder = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new org.jdesktop.swingx.JXTable();
        jPanel7 = new javax.swing.JPanel();
        btnNewOrder = new javax.swing.JButton();
        btnUpdateOrder = new javax.swing.JButton();
        btnDeleteOrder = new javax.swing.JButton();
        btnDetailsOrder = new javax.swing.JButton();
        dpkOrder = new org.jdesktop.swingx.JXDatePicker();
        lblPickOrder = new javax.swing.JLabel();
        tsWeekly = new org.jdesktop.swingx.JXTitledSeparator();
        btnUpdateListOrder = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblShowOrder = new javax.swing.JCheckBox();
        btnReportOrder = new javax.swing.JButton();
        pnlAssigning = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblAssigning = new org.jdesktop.swingx.JXTable();
        lblPickAssigning = new javax.swing.JLabel();
        dpkPickAssiging = new org.jdesktop.swingx.JXDatePicker();
        jPanel20 = new javax.swing.JPanel();
        btnNewAssigning = new javax.swing.JButton();
        btnUpdateAssigning = new javax.swing.JButton();
        btnDeleteAssigning = new javax.swing.JButton();
        btnDetailsAssigning = new javax.swing.JButton();
        btnBack6 = new javax.swing.JButton();
        btnUpdateListAssigning = new javax.swing.JButton();
        lblShowAssigning = new javax.swing.JCheckBox();

        setMinimumSize(new java.awt.Dimension(730, 450));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlOrder.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Highlighter simpleStripHL = HighlighterFactory.createSimpleStriping();
        tblOrder.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW,
            null, new Color(0, 0, 255)));
    tblOrder.setHighlighters(simpleStripHL);
    tblOrder.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW,
        null, new Color(255, 102, 0)));
tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        tblOrderMouseClicked(evt);
    }
    });
    jScrollPane1.setViewportView(tblOrder);

    pnlOrder.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 93, 680, 273));

    jPanel7.setLayout(new java.awt.GridLayout(1, 4, 5, 0));

    btnNewOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
    btnNewOrder.setText("New");
    btnNewOrder.setActionCommand("newOrder");
    btnNewOrder.addActionListener(this);
    jPanel7.add(btnNewOrder);

    btnUpdateOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/update.png"))); // NOI18N
    btnUpdateOrder.setText("Update");
    btnUpdateOrder.setEnabled(false);
    btnUpdateOrder.setActionCommand("updateOrder");
    btnUpdateOrder.addActionListener(this);
    jPanel7.add(btnUpdateOrder);

    btnDeleteOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"))); // NOI18N
    btnDeleteOrder.setText("Delete");
    btnDeleteOrder.setEnabled(false);
    btnDeleteOrder.setActionCommand("deleteOrder");
    btnDeleteOrder.addActionListener(this);
    jPanel7.add(btnDeleteOrder);

    btnDetailsOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/about_16.png"))); // NOI18N
    btnDetailsOrder.setText("Details");
    btnDetailsOrder.setEnabled(false);
    btnDetailsOrder.setActionCommand("detailsOrder");
    btnDetailsOrder.addActionListener(this);
    jPanel7.add(btnDetailsOrder);

    pnlOrder.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(317, 57, 383, 30));

    dpkOrder.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            dpkOrderActionPerformed(evt);
        }
    });
    dpkOrder.setFormats("yyy-MM-dd");
    pnlOrder.add(dpkOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 122, -1));

    lblPickOrder.setForeground(new java.awt.Color(51, 51, 51));
    lblPickOrder.setText("Pick a day");
    pnlOrder.add(lblPickOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 61, -1, 20));

    tsWeekly.setForeground(new java.awt.Color(0, 0, 204));
    tsWeekly.setHorizontalAlignment(SwingConstants.CENTER);
    tsWeekly.setTitle("» Salary Report «");
    pnlOrder.add(tsWeekly, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 16, 676, -1));

    btnUpdateListOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/update.png"))); // NOI18N
    btnUpdateListOrder.setText("Update List");
    btnUpdateListOrder.setActionCommand("updateListOrder");
    btnUpdateListOrder.addActionListener(this);
    pnlOrder.add(btnUpdateListOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(524, 377, 110, 30));

    btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Next-18.gif"))); // NOI18N
    btnNext.setActionCommand("next");
    btnNext.addActionListener(this);
    btnNext.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnNextActionPerformed(evt);
        }
    });
    pnlOrder.add(btnNext, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 377, 60, 30));

    lblShowOrder.setText("Show All");
    lblShowOrder.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            lblShowOrderItemStateChanged(evt);
        }
    });
    pnlOrder.add(lblShowOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 57, -1, 30));

    btnReportOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Script20x20.gif"))); // NOI18N
    btnReportOrder.setText("Report");
    btnReportOrder.setEnabled(false);
    btnReportOrder.setActionCommand("reportOrder");
    btnReportOrder.addActionListener(this);
    pnlOrder.add(btnReportOrder, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 377, -1, 30));

    tbpSales.addTab("Order", pnlOrder);

    jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    tblAssigning.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null}
        },
        new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            true, true, true, true, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tblAssigning.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW,
        null, new Color(0, 0, 255)));
tblAssigning.setHighlighters(simpleStripHL);
tblAssigning.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW,
    null, new Color(255, 102, 0)));
    tblAssigning.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblAssigningMouseClicked(evt);
        }
    });
    jScrollPane5.setViewportView(tblAssigning);

    jPanel14.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 79, 680, 247));

    lblPickAssigning.setText("Pick a day");
    jPanel14.add(lblPickAssigning, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 60, 20));

    dpkPickAssiging.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            dpkPickAssigingActionPerformed(evt);
        }
    });
    dpkPickAssiging.setFormats("yyy-MM-dd");
    jPanel14.add(dpkPickAssiging, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 130, -1));

    jPanel20.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

    btnNewAssigning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
    btnNewAssigning.setText("New");
    btnNewAssigning.setActionCommand("newAssigning");
    btnNewAssigning.addActionListener(this);
    jPanel20.add(btnNewAssigning);

    btnUpdateAssigning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/update.png"))); // NOI18N
    btnUpdateAssigning.setText("Update");
    btnUpdateAssigning.setEnabled(false);
    btnUpdateAssigning.setActionCommand("updateAssigning");
    btnUpdateAssigning.addActionListener(this);
    jPanel20.add(btnUpdateAssigning);

    btnDeleteAssigning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"))); // NOI18N
    btnDeleteAssigning.setText("Delete");
    btnDeleteAssigning.setEnabled(false);
    btnDeleteAssigning.setActionCommand("deleteAssigning");
    btnDeleteAssigning.addActionListener(this);
    jPanel20.add(btnDeleteAssigning);

    btnDetailsAssigning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/about_16.png"))); // NOI18N
    btnDetailsAssigning.setText("Details");
    btnDetailsAssigning.setEnabled(false);
    btnDetailsAssigning.setActionCommand("detailsAssigning");
    btnDetailsAssigning.addActionListener(this);
    jPanel20.add(btnDetailsAssigning);

    jPanel14.add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(292, 38, 400, 30));

    btnBack6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Back-18.gif"))); // NOI18N
    btnBack6.setActionCommand("back");
    btnBack6.addActionListener(this);
    jPanel14.add(btnBack6, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 337, 60, 30));

    btnUpdateListAssigning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/update.png"))); // NOI18N
    btnUpdateListAssigning.setText("Update List");
    btnUpdateListAssigning.setActionCommand("updateListAssigning");
    btnUpdateListAssigning.addActionListener(this);
    jPanel14.add(btnUpdateListAssigning, new org.netbeans.lib.awtextra.AbsoluteConstraints(514, 337, 110, 30));

    lblShowAssigning.setText("Show All");
    lblShowAssigning.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            lblShowAssigningItemStateChanged(evt);
        }
    });
    jPanel14.add(lblShowAssigning, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, 40));

    jPanel19.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

    javax.swing.GroupLayout pnlAssigningLayout = new javax.swing.GroupLayout(pnlAssigning);
    pnlAssigning.setLayout(pnlAssigningLayout);
    pnlAssigningLayout.setHorizontalGroup(
        pnlAssigningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlAssigningLayout.createSequentialGroup()
            .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 23, Short.MAX_VALUE))
    );
    pnlAssigningLayout.setVerticalGroup(
        pnlAssigningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlAssigningLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(44, Short.MAX_VALUE))
    );

    tbpSales.addTab("Assigning", pnlAssigning);

    add(tbpSales, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 450));
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNextActionPerformed

    private void tblAssigningMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAssigningMouseClicked
        // TODO add your handling code here:
        int i = tblAssigning.getSelectedRow();
        if (i >= 0) {
            btnUpdateAssigning.setEnabled(true);
            btnDeleteAssigning.setEnabled(true);
            btnDetailsAssigning.setEnabled(true);
            AssigningID = (long) tblAssigning.getValueAt(i, 0);
        }
    }//GEN-LAST:event_tblAssigningMouseClicked

    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderMouseClicked
        // TODO add your handling code here:
        int row = tblOrder.getSelectedRow();
        if (row >= 0) {
            btnUpdateOrder.setEnabled(true);
            btnDeleteOrder.setEnabled(true);
            btnDetailsOrder.setEnabled(true);
            OrderID = Long.parseLong(tblOrder.getValueAt(row, 0).toString());
            name = (String) tblOrder.getValueAt(row, 1);
            dlgCustomerList.CustomerID = new OrderDAO().getOrder(OrderID).getCustomerID();
            btnReportOrder.setEnabled(true);
        }
    }//GEN-LAST:event_tblOrderMouseClicked

    private void dpkOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpkOrderActionPerformed
        // TODO add your handling code here:
        if (dpkOrder.getDate() != null) {
            loadOrderData("search");
        } else {
            loadOrderData("");
        }
    }//GEN-LAST:event_dpkOrderActionPerformed

    private void dpkPickAssigingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpkPickAssigingActionPerformed
        // TODO add your handling code here:
        if (dpkPickAssiging.getDate() != null) {
            loadAssigningData("search");
        } else {
            loadAssigningData("");
        }
    }//GEN-LAST:event_dpkPickAssigingActionPerformed

    private void lblShowOrderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lblShowOrderItemStateChanged
        // TODO add your handling code here:
        if (lblShowOrder.isSelected()) {
            loadOrderData("");
        } else {
            loadOrderData("search");
        }
    }//GEN-LAST:event_lblShowOrderItemStateChanged

    private void lblShowAssigningItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lblShowAssigningItemStateChanged
        // TODO add your handling code here:
        if (lblShowAssigning.isSelected()) {
            loadAssigningData("");
        } else {
            loadAssigningData("search");
        }
    }//GEN-LAST:event_lblShowAssigningItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack6;
    public javax.swing.JButton btnDeleteAssigning;
    public javax.swing.JButton btnDeleteOrder;
    public javax.swing.JButton btnDetailsAssigning;
    public javax.swing.JButton btnDetailsOrder;
    public javax.swing.JButton btnNewAssigning;
    public javax.swing.JButton btnNewOrder;
    private javax.swing.JButton btnNext;
    public javax.swing.JButton btnReportOrder;
    public javax.swing.JButton btnUpdateAssigning;
    public javax.swing.JButton btnUpdateListAssigning;
    public javax.swing.JButton btnUpdateListOrder;
    public javax.swing.JButton btnUpdateOrder;
    public static org.jdesktop.swingx.JXDatePicker dpkOrder;
    private org.jdesktop.swingx.JXDatePicker dpkPickAssiging;
    public javax.swing.JPanel jPanel14;
    public javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JLabel lblPickAssigning;
    public javax.swing.JLabel lblPickOrder;
    public javax.swing.JCheckBox lblShowAssigning;
    public javax.swing.JCheckBox lblShowOrder;
    public javax.swing.JPanel pnlAssigning;
    public javax.swing.JPanel pnlOrder;
    public org.jdesktop.swingx.JXTable tblAssigning;
    public org.jdesktop.swingx.JXTable tblOrder;
    public javax.swing.JTabbedPane tbpSales;
    public org.jdesktop.swingx.JXTitledSeparator tsWeekly;
    // End of variables declaration//GEN-END:variables
    frmOrder order;
    frmAssigning assign;
    public long OrderID;
    public long AssigningID;
    public String name;

    public void loadOrderData(String type) {
        Locale locale = Locale.getDefault();
        ResourceBundle rb = ResourceBundle.getBundle(Main.baseName, locale);
        ArrayList list;
        java.util.Date date = dpkOrder.getDate();
        if (type.equals("search") && date != null) {
            list = new OrderDAO().getList(new Date(date.getTime()));
        } else {
            list = new Manager().getList("order");
        }
        Vector vData = new Vector();
        Vector vColumn = new Vector();
        vColumn.removeAllElements();
        vColumn.add(rb.getString("orderID"));
        vColumn.add(rb.getString("custName"));
        vColumn.add(rb.getString("onOrder"));
        vColumn.add(rb.getString("confirmation"));
        vColumn.add(rb.getString("empName"));
        for (int i = 0; i < list.size(); i++) {
            Vector vRow = new Vector();
            Order order = (Order) list.get(i);
            vRow.add(order.getOrderID());
            Customer customer = new CustomerDAO().getCustomer(order.getCustomerID());
            vRow.add(customer.getFirstName() + " " + customer.getLastName());
            vRow.add(order.getOnOrder());
            String confirm = rb.getString("yes");
            if (!order.isConfirmation()) {
                confirm = rb.getString("no");
            }
            vRow.add(confirm);
            Employee emp = new EmployeeDAO().getEmployee(order.getEmployeeID());
            vRow.add(emp.getFirstName() + " " + emp.getLastName());
            vData.add(vRow);
        }
        DefaultTableModel model = new DefaultTableModel(vData, vColumn);
        this.tblOrder.setModel(model);
    }

    public void loadAssigningData(String type) {
         Locale locale = Locale.getDefault();
        ResourceBundle rb = ResourceBundle.getBundle(Main.baseName, locale);
        ArrayList list;
        java.util.Date date = dpkPickAssiging.getDate();
        if (type.equals("search") && date != null) {
            list = new AssigningDAO().getList(new Date(date.getTime()));
        } else {
            list = new Manager().getList("assigning");
        }
        Vector vData = new Vector();
        Vector vColumn = new Vector();
        vColumn.removeAllElements();
        vColumn.add(rb.getString("assigningID"));
        vColumn.add(rb.getString("orderID"));
        vColumn.add(rb.getString("onAssigning"));
        vColumn.add(rb.getString("custName"));
        vColumn.add(rb.getString("empName"));
        for (int i = 0; i < list.size(); i++) {
            Vector vRow = new Vector();
            Assigning assigning = (Assigning) list.get(i);
            vRow.add(assigning.getAssigningID());
            vRow.add(assigning.getOrderID());
            Order order = new OrderDAO().getOrder(assigning.getOrderID());
            vRow.add(assigning.getOnAssigning());
            Customer customer = new CustomerDAO().getCustomer(order.getCustomerID());
            vRow.add(customer.getFirstName() + " " + customer.getLastName());
            Employee emp = new EmployeeDAO().getEmployee(assigning.getEmployeeID());
            vRow.add(emp.getFirstName() + " " + emp.getLastName());
            String confirm = rb.getString("yes");
            vData.add(vRow);
        }
        DefaultTableModel model = new DefaultTableModel(vData, vColumn);
        this.tblAssigning.setModel(model);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "next":
                tbpSales.setSelectedIndex(tbpSales.getSelectedIndex() + 1);
                break;
            case "back":
                tbpSales.setSelectedIndex(tbpSales.getSelectedIndex() - 1);
                break;
            case "newOrder":
                if (order == null) {
                    order = new frmOrder();
                } else {
                    order.requestFocus();
                }
                order.loadEmptyForm();
                order.setVisible(true);
                break;
            case "updateOrder":
                if (order == null) {
                    order = new frmOrder();
                } else {
                    order.requestFocus();
                }
                order.btnAccept.setActionCommand("update");
                order.btnAccept.setVisible(true);
                order.setTitle("Update Order Information");
                order.lblOrderID.setText(OrderID + "");
                order.btnRemoveDelete.setText("Delete");
                order.btnRemoveDelete.setVisible(true);
                order.btnRemoveDelete.setEnabled(false);
                order.btnRemoveDelete.setActionCommand("delete");
                Employee emp = new EmployeeDAO().getEmployee(Main.EmployeeID);
                order.lblEmployeeName.setText(emp.getFirstName() + " " + emp.getLastName());
                frmOrder.lblCustomerName.setText(name);
                order.btnCustomer.setVisible(true);
                order.btnCar.setVisible(true);
                try {
                    order.setOrderData(OrderID);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                order.dpkOrder.setDate(new OrderDAO().getOrder(OrderID).getOnOrder());
                order.lblTotalPrice.setText(new OrderDAO().getTotalPrice(OrderID) + "");
                order.setVisible(true);
                break;
            case "deleteOrder":
                new Manager().delete(OrderID, "order");
                loadOrderData("");
                break;
            case "detailsOrder":
                if (order == null) {
                    order = new frmOrder();
                } else {
                    order.requestFocus();
                }
                order.setTitle("Order Details");
                order.btnAccept.setVisible(false);
                order.btnCar.setVisible(false);
                order.btnRemoveDelete.setVisible(false);
                order.btnCustomer.setVisible(false);
                try {
                    order.setOrderData(OrderID);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
                order.lblOrderID.setText(OrderID + "");
                emp = new EmployeeDAO().getEmployee(Main.EmployeeID);
                order.lblEmployeeName.setText(emp.getFirstName() + " " + emp.getLastName());
                order.dpkOrder.setDate(new OrderDAO().getOrder(OrderID).getOnOrder());
                order.lblTotalPrice.setText(new OrderDAO().getTotalPrice(OrderID) + "");
                order.setVisible(true);
                break;

            case "newAssigning":
                if (assign == null) {
                    assign = new frmAssigning();
                } else {
                    assign.requestFocus();
                }
                assign.btnAccept.setVisible(true);
                assign.btnOrder.setVisible(true);
                assign.lblAssigningID.setText(new Manager().getNewID("Assigning")+"");
                assign.btnAccept.setActionCommand("add");
                assign.setTitle("Add Assigning Information");
                assign.loadEmptyForm();
                assign.setVisible(true);
                break;
            case "updateAssigning":
                if (assign == null) {
                    assign = new frmAssigning();
                } else {
                    assign.requestFocus();
                }
                assign.btnAccept.setVisible(true);
                assign.btnOrder.setVisible(true);
                assign.btnAccept.setActionCommand("update");
                assign.setTitle("Update Assigning Information");
                assign.loadAssigningData(AssigningID);
                assign.setVisible(true);
                break;
            case "deleteAssigning":
                new Manager().delete(AssigningID, "assigning");
                break;
            case "detailsAssigning":
                if (assign == null) {
                    assign = new frmAssigning();
                } else {
                    assign.requestFocus();
                }
                assign.setTitle("Assigning Information");
                assign.btnAccept.setVisible(false);
                assign.btnOrder.setVisible(false);
                assign.loadAssigningData(AssigningID);
                assign.setVisible(true);
                break;
            case "updateListOrder":
                new Media(new File("chimes.wav").getAbsolutePath()).start();
                loadOrderData("");
                btnUpdateOrder.setEnabled(false);
                btnDeleteOrder.setEnabled(false);
                btnDetailsOrder.setEnabled(false);
                break;
            case "updateListAssigning":
                new Media(new File("chimes.wav").getAbsolutePath()).start();
                btnUpdateAssigning.setEnabled(false);
                btnDeleteAssigning.setEnabled(false);
                btnDetailsAssigning.setEnabled(false);
                loadAssigningData("");
                break;
            case "reportOrder":
                try {
                    new Utility().getReportWithParam("Order", OrderID + "");
                } catch (Exception ex) {
                    Logger.getLogger(pnlSales.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
        }
    }
}
